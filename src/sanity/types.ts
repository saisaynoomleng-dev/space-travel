/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Technology = {
  _id: string;
  _type: 'technology';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  desc?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type Crew = {
  _id: string;
  _type: 'crew';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  rank?: string;
  desc?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type Destination = {
  _id: string;
  _type: 'destination';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  desc?: string;
  distance?: string;
  time?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Technology
  | Crew
  | Destination
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: DESTINATIONS_QUERY
// Query: *[_type == 'destination'    && defined(slug.current)]    | order(name asc){        name,        slug,        desc,        distance,        time,        mainImage{        alt,        asset->{url}        }  }
export type DESTINATIONS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  desc: string | null;
  distance: string | null;
  time: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;
// Variable: CREWS_QUERY
// Query: *[_type == 'crew'    && defined(slug.current)]    | order(name asc){        name,        slug,        rank,        desc,        mainImage{        alt,        asset->{url}        }  }
export type CREWS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  rank: string | null;
  desc: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;
// Variable: TECHNOLOGIES_QUERY
// Query: *[_type == 'technology'    && defined(slug.current)]    |order(name asc){        name,        desc,        slug,        mainImage{        alt,        asset->{url}        }    }
export type TECHNOLOGIES_QUERYResult = Array<{
  name: string | null;
  desc: string | null;
  slug: Slug | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "\n    *[_type == 'destination'\n    && defined(slug.current)]\n    | order(name asc){\n        name,\n        slug,\n        desc,\n        distance,\n        time,\n        mainImage{\n        alt,\n        asset->{url}\n        }\n  }": DESTINATIONS_QUERYResult;
    "\n    *[_type == 'crew'\n    && defined(slug.current)]\n    | order(name asc){\n        name,\n        slug,\n        rank,\n        desc,\n        mainImage{\n        alt,\n        asset->{url}\n        }\n  }": CREWS_QUERYResult;
    "\n    *[_type == 'technology'\n    && defined(slug.current)]\n    |order(name asc){\n        name,\n        desc,\n        slug,\n        mainImage{\n        alt,\n        asset->{url}\n        }\n    }\n    ": TECHNOLOGIES_QUERYResult;
  }
}
